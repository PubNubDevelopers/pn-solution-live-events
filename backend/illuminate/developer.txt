1. Initialize the Node.js project
   - `npm init -y`
   - Install dependencies: `npm install axios pubnub inquirer dotenv dayjs lodash`

2. Configure credentials and environment
   - Load `ADMIN_EMAIL`, `ACCOUNT_ID`, `PUBNUB_PUBLISH_KEY`, `PUBNUB_SUBSCRIBE_KEY`, `CONTROL_CHANNEL`, `MESSAGE_CHANNEL`, `COOL_DOWN_MS`, `AGGREGATION_WINDOW_SEC` from environment or prompt via `inquirer`. Prompt for `ADMIN_PASSWORD` via `inquirer` at runtime (do not load from environment).

3. Authenticate with Admin API
   - POST `https://admin.pubnub.com/api/me` with `{ email, password }`
   - Extract `session_token`, `user_id`; use `X-Session-Token` header thereafter.

4. Provision Illuminate objects (on reset or first run)
   a. Deactivate existing business objects:
      - POST `/illuminate/v1/accounts/{ACCOUNT_ID}/business-objects/deactivate`
   b. Create Business Objects for each reaction type (e.g., cheer, angry):
      - POST `/illuminate/v1/accounts/{ACCOUNT_ID}/business-objects` with JSONPath field definitions.
   c. Create Metrics to count events in the aggregation window:
      - POST `/illuminate/v1/accounts/{ACCOUNT_ID}/metrics` with `evaluationWindow: AGGREGATION_WINDOW_SEC`, `function: COUNT`, etc.
   d. Create Decisions linking metrics to actions:
      - POST `/illuminate/v1/accounts/{ACCOUNT_ID}/decisions` with input thresholds (e.g., >20), output fields, and `actionValues` (IDs 001, 002).

5. Subscribe to PubNub channels
   - Instantiate PubNub SDK and subscribe to `CONTROL_CHANNEL` and `MESSAGE_CHANNEL`.
   - Listen for Data Controls events (to generate synthetic messages) and for reaction messages.

6. Aggregate message data and trigger actions
   - Maintain a sliding time window (use `dayjs` or timestamp buffer) of incoming reaction messages per type.
   - On an interval (e.g., every 5 seconds), compute counts over `AGGREGATION_WINDOW_SEC`.
   - If a count exceeds its decision threshold and not in cool-down:
      - POST `/illuminate/v1/accounts/{ACCOUNT_ID}/decisions/{decisionId}/action-data` with `{ startDate, endDate, utcOffsetSec: 0, aggregationWindow: AGGREGATION_WINDOW_SEC }`.
      - Begin a cool-down timer of `COOL_DOWN_MS` to prevent immediate re-triggering.
   - On successful response, schedule each action by its `delayOffsetInMs` to `pubnub.publish({ channel, message: action.data })`.

7. Simulate polls and votes
   - Use the provided `polls.js` modules (`require('./polls').angry`, `.cheer`) to access action arrays for each decision ID.
   - After publishing a `game.new-poll`, simulate votes over time on `MESSAGE_CHANNEL`, tally real and fake votes, then publish `game.poll-results`.

8. CLI commands
   - Provide a `reset` command to deactivate and re-provision all Illuminate objects.
   - Provide an `exit` or `quit` command to shutdown subscriptions and timers.

9. Logging and error handling
   - Log all HTTP requests, responses, PubNub publishes, and errors.
   - Retry transient failures (e.g., network timeouts) with exponential backoff.
   - Graceful shutdown: unsubscribe from channels, clear timers.
