1. Initialize the Node.js project
   - `npm init -y`
   - Install dependencies: `npm install axios inquirer dotenv`

2. Configure credentials and environment
   - Load `ADMIN_EMAIL`, `ACCOUNT_ID`, `AGGREGATION_WINDOW_SEC` from environment or prompt via `inquirer`. Prompt for `ADMIN_PASSWORD` via `inquirer` at runtime (do not load from environment).

3. Authenticate with Admin API
   - POST `https://admin.pubnub.com/api/me` with `{ email, password }`
   - Extract `session_token`, `user_id`; use `X-Session-Token` header thereafter.

4. Provision Illuminate objects (on reset or first run)
   a. Deactivate existing business objects:
      - POST `/illuminate/v1/accounts/{ACCOUNT_ID}/business-objects/deactivate`
   b. Create Business Objects for each reaction type (e.g., cheer, angry):
      - POST `/illuminate/v1/accounts/{ACCOUNT_ID}/business-objects` with JSONPath field definitions.
   c. Create Metrics to count events in the aggregation window:
      - POST `/illuminate/v1/accounts/{ACCOUNT_ID}/metrics` with `evaluationWindow: AGGREGATION_WINDOW_SEC`, `function: COUNT`, etc.
   d. Create Decisions linking metrics to actions:
      - POST `/illuminate/v1/accounts/{ACCOUNT_ID}/decisions` with input thresholds (e.g., >20), output fields, and `actionValues` (IDs 001, 002).

5. CLI commands
   - Provide a `reset` command to deactivate and re-provision all Illuminate objects.
   - Provide an `exit` or `quit` command to shutdown subscriptions and timers.

6. Logging and error handling
   - Log all HTTP requests, responses and errors.
   - Retry transient failures (e.g., network timeouts) with exponential backoff.
   - Graceful shutdown: unsubscribe from channels, clear timers.

7. Only output JavaScript code, no comments or explanations.
   - Use `axios` for HTTP requests.
   - Use `inquirer` for CLI prompts.
   - Use `dotenv` for environment variable management.
